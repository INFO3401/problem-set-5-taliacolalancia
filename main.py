# Main code file
from utils import *
from covid import *

# Load in the data from the GitHub repository and reformat it for use with our
# statistical libraries. Note: this depends on your repository being in the same
# directory as your data.
#df = loadAndCleanData("COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
df = loadAndCleanData("COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
df = correctDateFormat(df)
print(df)

# Print a graph of the confirmed cases over time and the confirmed cases across
# countries over time. Keep in mind that uncertainty as shown in these graphs
# corresponds to variation over different regions in the country, *not*
# actual uncertainty in the sample, which may come from a variety of sources.
#plotTimeline(df, "Date", "Confirmed")
#plotMultipleTimelines(df, "Date", "Confirmed", "Country/Region")


# Use these variables so it's easy to change up what columns you look at
# These just reference the column name
x = "Date"
y = "Confirmed"

# Run a linear regression on our covid data
# This will look at the covid data for each row of the pivoted dataset
# and will print the equation generated by the model.
# Note the R2 here: this model isn't very good--it basically predicts 0 because
# the data is heavily time-varying, meaning lots of 0 datapoints early in the
# dataset from before the country reached it.
#linearModel = runTemporalLinearRegression(df, x, y)
#print("y = " + str(linearModel[0]) + "x + " + str(linearModel[1]))

# To get a better prediction, let's aggregate all cases, so we have one count
# per date. Look at the sum total cases over the entire world.
groupedDf = df.groupby(x, as_index=False).sum()
#linearModel = runTemporalLinearRegression(groupedDf, x, y)
#print("y_world = " + str(linearModel[0]) + "x + " + str(linearModel[1]))

# We can see that things are still a bit skewed: we're starting to see that
# exponential piece of the curve take off. We can try to take the log of the
# data column to model the growth rate (e^m will give that to us). np math
# operations apply to the whole column, so that would look like this:
groupedDf["Confirmed"] = np.log(groupedDf["Confirmed"])
#linearModel = runTemporalLinearRegression(groupedDf, x, y)
#print("y_world = " + str(linearModel[0]) + "x + " + str(linearModel[1]))

# We can see that the exponential curve still isn't a great model for the world:
# we're still collecting data and the general population is still in the exponential
# part of the growth curve. Let's take a look at an individual country, Italy.
# We can pull out Italy's data, remove any 0 entries, and look at the model.
italyData = aggregateCountry(df, "Italy")
italyData = italyData[italyData["Confirmed"] > 3]
italyData["Confirmed"] = np.log(italyData["Confirmed"])
#linearModel = runTemporalLinearRegression(italyData, x, y)
#print("y_italy = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
#italyGrowth = math.exp(linearModel[0])
#print("Italy's Growth Rate is " + str(italyGrowth))

# Model the growth rate in the US. Note that the best way to model lots of
# growth rates would be to define a computeGrowthRate function in covid.py.
usData = aggregateCountry(df, "US")
usData = usData[usData["Confirmed"] > 3]
usData["Confirmed"] = np.log(usData["Confirmed"])
#linearModel = runTemporalLinearRegression(usData, x, y)
#print("y_us = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
#usGrowth = math.exp(linearModel[0])
#print("US's Growth Rate is " + str(usGrowth))

# Model the disease spread in China. China has reached the top of the logistic
# curve, so it doesn't make sense to use a linear model any more. Instead, we're
# going to fit the data to a logistic function.
chinaData = aggregateCountry(df, "China")
#linearModel = runTemporalLinearRegression(chinaData, x, y)
#logisticModel = runTemporalLogisticRegression(chinaData, x, y)
#print("y_china = 1 / (1 + e^-(" + str(logisticModel[1]) + "x + " + str(logisticModel[2]) + "))")

#9 Problem Set 5
#print(mergeData(df, df1, "Deaths"))
#x = mergeData(x, df2, "Recovered")
#print(mergeData(x, df2, "Recovered"))

#11 Problem Set 5
#plotTimeline(x, "Date", "Confirmed")
#plotTimeline(x, "Date", "Deaths")
#plotTimeline(x, "Date", "Recovered")

#13 Problem Set 5
#plotMultipleTimelines(x, "Date", "Recovered", "Deaths")
#plotMultipleTimelines(x, "Date", "Confirmed", "Deaths")
#plotMultipleTimelines(x, "Date", "Confirmed", "Recovered")

#16 Problem Set 5
topCorrelation(df, "Confirmed", 5)
topCorrelation(df, "Recovered", 5)

#17 Problem Set 5
plotMultipleTimeline(df, "Confirmed", ["Germany", "Spain", "Czechia", "Morocco", "Romania", "Belgium", "Portugal"])
plotMultipleTimeline(df, "Deaths". ["Angola", "Monaco", "Ireland", "Turkey", "US", "Belgium"])
plotMultipleTimeline(df, "Recovered", ["Cabo Verde", "Guyana", "Antigua and Barbuda", "Laos", "Liechtenstein", "Belgium", "Spain"])

#18, 19, 20, 21, and 22 Problem Set 5
germanyData = aggregateCountry(df, "Germany")
germanyData = germanyData[germanyData["Confirmed"] > 3]
germanyData["Confirmed"] = np.log(germanyData["Confirmed"])
linearModel = runTemporalLinearRegression(germanyData, x, y)
print("y_germany = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
germanyGrowth = math.exp(linearModel[0])
print("Germany's Growth Rate is " + str(germanyGrowth))

spainData = aggregateCountry(df, "Spain")
spainData = spainData[spainData["Confirmed"] > 3]
spainData["Confirmed"] = np.log(spainData["Confirmed"])
linearModel = runTemporalLinearRegression(spainData, x, y)
print("y_spain = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
spainGrowth = math.exp(linearModel[0])
print("Spain's Growth Rate is " + str(spainGrowth))

angolaData = aggregateCountry(df, "Angola")
angolaData = angolaData[angolaData["Confirmed"] > 3]
angolaData["Confirmed"] = np.log(angolaData["Confirmed"])
linearModel = runTemporalLinearRegression(angolaData, x, y)
print("y_angola = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
angolaGrowth = math.exp(linearModel[0])
print("Angola's Growth Rate is " + str(angolaGrowth))

monacoData = aggregateCountry(df, "Monaco")
monacoData = monacoData[monacoData["Confirmed"] > 3]
monacoData["Confirmed"] = np.log(monacoData["Confirmed"])
linearModel = runTemporalLinearRegression(monacoData, x, y)
print("y_monaco = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
monacoGrowth = math.exp(linearModel[0])
print("Monaco's Growth Rate is " + str(monacoGrowth))

cvData = aggregateCountry(df, "Cabo Verde")
cvData = cvData[cvData["Confirmed"] > 3]
cvData["Confirmed"] = np.log(cvData["Confirmed"])
linearModel = runTemporalLinearRegression(germanyData, x, y)
print("y_cv = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
cvGrowth = math.exp(linearModel[0])
print("Cabo Verde's Growth Rate is " + str(cvGrowth))

guyanaData = aggregateCountry(df, "Guyana")
guyanaData = guyanaData[guyanaData["Confirmed"] > 3]
guyanaData["Confirmed"] = np.log(guyanaData["Confirmed"])
linearModel = runTemporalLinearRegression(guyanaData, x, y)
print("y_guyana = " + str(linearModel[0]) + "x + " + str(linearModel[1]))
guyanaGrowth = math.exp(linearModel[0])
print("Guyana's Growth Rate is " + str(guyanaGrowth))
